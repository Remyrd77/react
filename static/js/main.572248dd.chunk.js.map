{"version":3,"sources":["Flashcard.js","FlashcardList.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","key","dangerouslySetInnerHTML","__html","FlashcardList","flashcards","id","ISLT","App","setFlashcards","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.572248dd.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nexport default function Flashcard({ flashcard }) {\r\n  const [flip, setFlip] = useState(false)\r\n  const [height, setHeight] = useState('initial')\r\n\r\n  const frontEl = useRef()\r\n  const backEl = useRef()\r\n\r\n  function setMaxHeight() {\r\n    const frontHeight = frontEl.current.getBoundingClientRect().height\r\n    const backHeight = backEl.current.getBoundingClientRect().height\r\n    setHeight(Math.max(frontHeight, backHeight, 100))\r\n  }\r\n\r\n  useEffect(setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options])\r\n  useEffect(() => {\r\n    window.addEventListener('resize', setMaxHeight)\r\n    return () => window.removeEventListener('resize', setMaxHeight)\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className={`card ${flip ? 'flip' : ''}`}\r\n      style={{ height: height }}\r\n      onClick={() => setFlip(!flip)}\r\n    >\r\n      <div className=\"front\" ref={frontEl}>\r\n        <b>{flashcard.question}</b>\r\n        <div className=\"flashcard-options\">\r\n          {flashcard.options.map(option => {\r\n            return <div className=\"flashcard-option\" key={option}><span dangerouslySetInnerHTML={{ __html: option }}></span></div>\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"back\" ref={backEl}><span>{flashcard.answer}</span></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Flashcard from './Flashcard';\r\n\r\nexport default function FlashcardList({ flashcards }) {\r\n  return (\r\n    <div className=\"card-grid\">\r\n      {flashcards.map(flashcard => {\r\n        return <Flashcard flashcard={flashcard} key={flashcard.id} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport FlashcardList from './FlashcardList';\r\nimport './App.css'\r\nimport axios from 'axios'\r\n\r\nfunction App() {\r\n  const [flashcards, setFlashcards] = useState(ISLT)\r\n  const [categories, setCategories] = useState([])\r\n\r\n  const categoryEl = useRef()\r\n  const amountEl = useRef()\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('https://opentdb.com/api_category.php')\r\n      .then(res => {\r\n        setCategories(res.data.trivia_categories)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\r\n  }, [])\r\n\r\n  function decodeString(str) {\r\n    const textArea = document.createElement('textarea')\r\n    textArea.innerHTML = str\r\n    return textArea.value\r\n  }\r\n  // function getCards(){\r\n  //   const sampleCards =  {\"results\":[{\"category\":\"General Knowledge\",\"type\":\"multiple\",\"difficulty\":\"easy\",\"question\":\"What is the profession of Elon Musk&#039;s mom, Maye Musk?\",\"correct_answer\":\"Model\",\"incorrect_answers\":[\"Professor\",\"Biologist\",\"Musician\"]}]}\r\n  //   return sampleCards\r\n  // }\r\n  function handleSubmit(e) {\r\n\r\n    e.preventDefault()\r\n    axios\r\n      .get('https://opentdb.com/api.php', {\r\n        params: {\r\n          amount: amountEl.current.value,\r\n          category: categoryEl.current.value\r\n        }\r\n      })\r\n      .then(res => {\r\n        setFlashcards(res.data.results.map((questionItem, index) => {\r\n          const answer = decodeString(questionItem.correct_answer)\r\n          const options = [\r\n            ...questionItem.incorrect_answers.map(a => decodeString(a)),\r\n            answer\r\n          ]\r\n          return {\r\n            id: `${index}-${Date.now()}`,\r\n            question: decodeString(questionItem.question),\r\n            answer: answer,\r\n            options: options.sort(() => Math.random() - .5)\r\n          }\r\n        }))\r\n      })\r\n\r\n\r\n\r\n\r\n    /*setFlashcards(getCards().results.map((questionItem, index) => {\r\n        const answer = decodeString(questionItem.correct_answer)\r\n        const options = [\r\n          ...questionItem.incorrect_answers.map(a => decodeString(a)),\r\n          answer\r\n        ]\r\n        return {\r\n          id: `${index}-${Date.now()}`,\r\n          question: decodeString(questionItem.question),\r\n          answer: answer,\r\n          options: options.sort(() => Math.random() - .5)\r\n        }\r\n\r\n    }))*/\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className=\"header\" onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"category\">Category</label>\r\n          <select id=\"category\" ref={categoryEl}>\r\n            {categories.map(category => {\r\n              return <option value={category.id} key={category.id}>{category.name}</option>\r\n            })}\r\n            <option value={50} key={50}>Adj</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"amount\">Number of Questions</label>\r\n          <input type=\"number\" id=\"amount\" min=\"1\" step=\"1\" defaultValue={10} ref={amountEl} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <button className=\"btn\">Generate</button>\r\n        </div>\r\n      </form>\r\n      <div className=\"container\">\r\n        <FlashcardList flashcards={flashcards} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nconst name = { question: 'sinuous' };\r\nconst ISLT = [\r\n  {\r\n    id: 50,\r\n    question: 'serpentine',\r\n    answer: 'sinuous',\r\n    options: [\r\n      \"On a <b>serpentine</b> question, with grand arias\"\r\n    ]\r\n  },\r\n  {\r\n    id: 51,\r\n    question: 'thrall',\r\n    answer: 'the state of being in someones power or having great power over someone',\r\n    options: [\r\n      \"While I'm was asleep I had returned without the least effort to an earlier stage in my life, now for ever outgrown; and had come under the <b>thrall</b> of one of my childish terrors, such as that old terror of my great-uncles pulling my curls, which was effectually dispelled on the dayâ€”the dawn of a new era to me-on which they were finally cropped from my head.\"\r\n    ]\r\n  }\r\n]\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}